@page "/"
@using System.Diagnostics
@using System.Text.Json
@using Data

<h1>Hello, world!</h1>

<div>
    <MudBlazor.MudDataGrid @ref="mudDataGrid" T="Product" Items="@_products"
    ReadOnly="false" EditMode="DataGridEditMode.Form"
    StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges"
    Filterable="true" SortMode="SortMode.Multiple" Groupable="true" Hover="false" Dense="true" Striped="true" Bordered="true"
    FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive">
        <Columns>
            <PropertyColumn Property="p => p.Id" />
            <PropertyColumn Property="p => p.Brand" />
            <PropertyColumn Property="p => p.Name" />
            <PropertyColumn Property="p => p.Description" />
            <PropertyColumn Property="p => p.Quantity" />
            <PropertyColumn Property="p => p.Price" />
            @* <TemplateColumn CellClass="d-flex justify-end"> *@
            <TemplateColumn>
                <CellTemplate>
                    <div class="d-flex justify-end" >
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="@(()=>DeleteItem(context.Item))" />
                    </div>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="Product" />
        </PagerContent>
    </MudBlazor.MudDataGrid>
</div>

<MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@NewItem">New Item</MudButton>
&emsp;
<MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@LoadData">Load Test Data</MudButton>
&nbsp;
<MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@ClearDb">Clear Db</MudButton>
&nbsp;



<br />
<br />

@* // Copy Paste *@
<MudExpansionPanels Style="flex:1">
    <MudExpansionPanel Text="Show Events" Expanded="true">

        @{i = _events.Count;}
        @foreach (var message in _events)
        {
            <MudText Typo="@Typo.body2">[@(i--)]@message</MudText>
        }
        @if (_events.Count > 0)
        {
            <div class="d-flex">
                <MudSpacer />
                <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
            </div>
        }
    </MudExpansionPanel>
</MudExpansionPanels>

@code {

    ProductRepository _repository = new ProductRepository();
    List<IProduct> _iProducts = new List<IProduct>();
    List<Product> _products = new List<Product>();
    private MudDataGrid<Product> mudDataGrid = new MudDataGrid<Product>();
    private List<string> _events = new();
    int i;

    protected override void OnInitialized()
    {
        LogEvent("*** Event = OnInitialized()");
        _iProducts = _repository.GetAllProducts();
        _products = _iProducts.Cast<Product>().ToList();
        LogEvent($" ... Products Loaded: {_products.Count()}");
    }

    private void LoadData()
    {
        LogEvent($"*** Event = LoadData");
        

        LogEvent(" ... Checking Database");
        _iProducts = _repository.GetAllProducts();
        _products = _iProducts.Cast<Product>().ToList();
        if (_products.Count == 0)
        {
            LogEvent(" ... No Products found, getting test data");
            _iProducts = Data.TestIProducts.GetTestProducts();
            _products = _iProducts.Cast<Product>().ToList();
            LogEvent(" ... Adding Products to Db");

            // Lets check adding one product ...
            // Product product = _products.First();
            // Debug.WriteLine($"Product: {product}");
            // Debug.WriteLine($"Product Id: {JsonSerializer.Serialize(product)}");
            // var result = _repository.AddProduct(product);
            // Debug.WriteLine($"Result: {result}");
            // Debug.WriteLine($"Result Id: {JsonSerializer.Serialize(result)}");

            // now lets add them all
            _products.ForEach(p => _repository.AddProduct(p));
            LogEvent(" ... Finished Initializing Data");
        }
        else LogEvent(" ... Warning: Database is not empty.");
        
    }

    private void LogEvent(string message)
    {
        Debug.WriteLine(message);
        _events.Insert(0, message);
    }

    private void StartedEditingItem(Product product)
    {
        LogEvent($"*** Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(product)}");
    }

    private void CanceledEditingItem(Product product)
    {
        LogEvent($"*** Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(product)}");
    }

    private void CommittedItemChanges(Product product)
    {
        LogEvent($"*** Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(product)}");
        _repository.UpdateProduct(product);

    }

    private void DeleteItem(Product product)
    {
        LogEvent($"*** Event = DeleteItem, Data = {System.Text.Json.JsonSerializer.Serialize(product)}");
        _products.Remove(product);
        _repository.DeleteProduct(product.Id);
    }

    private void NewItem()
    {
        LogEvent($"*** Event = NewItem, Start");
        var newProduct = new Product()
            {
                Id = _products.Count() > 0 ? _products.Max(p => p.Id) + 1 : 1,
                Brand = "New Brand",
                Name = "New Name",
                Description = "New Description",
                Quantity = 0,
                Price = 0
            };
        _products.Add(newProduct);
        _repository.AddProduct(newProduct);

        mudDataGrid.SetEditingItemAsync(newProduct);
        LogEvent($" ... NewItem, Data = {System.Text.Json.JsonSerializer.Serialize(newProduct)}");
        
    }

    private void ClearDb()
    {
        LogEvent($"*** Event = ClearDb");
        _repository.ResetDatabase();
        _products.Clear();
    }
}

