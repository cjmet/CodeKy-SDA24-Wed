@page "/"
@using Mud.Data


<h1>Hello, world!</h1>

<div>
    <MudBlazor.MudDataGrid @ref="mudDataGrid" T="Product" Items="@_products"
    ReadOnly="false" EditMode="DataGridEditMode.Form"
    StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges"
    Filterable="true" SortMode="SortMode.Multiple" Groupable="true" Hover="false" Dense="true" Striped="true" Bordered="true"
    FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive">
        <Columns>
            <PropertyColumn Property="p => p.Id" />
            <PropertyColumn Property="p => p.Brand" />
            <PropertyColumn Property="p => p.Name" />
            <PropertyColumn Property="p => p.Description" />
            <PropertyColumn Property="p => p.Quantity" />
            <PropertyColumn Property="p => p.Price" />
            @* <TemplateColumn CellClass="d-flex justify-end"> *@
            <TemplateColumn>
                <CellTemplate>
                    <div class="d-flex justify-end" >
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="@(()=>DeleteItem(context.Item))" />
                    </div>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="Product" />
        </PagerContent>
    </MudBlazor.MudDataGrid>
</div>

<MudButton OnClick="@NewItem" Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled">New Item</MudButton>


@* // Copy Paste *@
<MudExpansionPanels Style="flex:1">
    <MudExpansionPanel Text="Show Events">
        @foreach (var message in _events)
        {
                <MudText Typo="@Typo.body2">@message</MudText>
        }
        @if (_events.Count > 0)
        {
                <div class="d-flex">
                    <MudSpacer />
                    <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
                </div>
        }
    </MudExpansionPanel>
</MudExpansionPanels>

@code {

    List<IProduct> _iProducts = new List<IProduct>();
    List<Product> _products = new List<Product>();
    private MudDataGrid<Product> mudDataGrid = new MudDataGrid<Product>();
    private List<string> _events = new();

    protected override void OnInitialized()
    {
        _iProducts = Mud.Data.TestIProducts.GetTestProducts();
        _products = _iProducts.Cast<Product>().ToList();
    }


    private void LogEvent(string message)
    {
        _events.Insert(0, message);
    }

    private void StartedEditingItem(Product product)
    {
        LogEvent($"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(product)}");
    }

    private void CanceledEditingItem(Product product)
    {
        LogEvent($"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(product)}");
    }

    private void CommittedItemChanges(Product product)
    {
        LogEvent($"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(product)}");
    }

    private void DeleteItem(Product product)
    {
        LogEvent($"Event = DeleteItem, Data = {System.Text.Json.JsonSerializer.Serialize(product)}");
        _products.Remove(product);
    }

    private void NewItem()
    {
        var newProduct = new Product()
            {
                Id = _products.Max(p => p.Id) + 1,
                Brand = "New Brand",
                Name = "New Name",
                Description = "New Description",
                Quantity = 0,
                Price = 0
            };
        _products.Add(newProduct);
        mudDataGrid.SetEditingItemAsync(newProduct);
        LogEvent($"Event = NewItem, Data = {System.Text.Json.JsonSerializer.Serialize(newProduct)}");
    }
}

