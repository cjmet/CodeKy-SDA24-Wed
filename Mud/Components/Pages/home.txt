    ReadOnly="false" EditMode="DataGridEditMode.Form"


---


    private MudDataGrid<Product> mudDataGrid = new MudDataGrid<Product>();


---


    ReadOnly="false" EditMode="DataGridEditMode.Form" StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges"
    Filterable="true" SortMode="SortMode.Multiple" Groupable="true" Hover="false" Dense="true" Striped="true" Bordered="true"


---


            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="@(()=>DeleteItem(context.Item))" />
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
                </CellTemplate>
            </TemplateColumn>


---


    @* // Copy Paste *@
    <MudExpansionPanels Style="flex:1">
        <MudExpansionPanel Text="Show Events">
            @foreach (var message in _events)
            {
                <MudText Typo="@Typo.body2">@message</MudText>
            }
            @if (_events.Count > 0)
            {
                <div class="d-flex">
                    <MudSpacer />
                    <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
                </div>
            }
        </MudExpansionPanel>
    </MudExpansionPanels>
 

---

 
    <MudButton OnClick="@NewItem" ButtonType="ButtonType.Button">New Item</MudButton>


---


    private List<string> _events = new();


---


    private void LogEvent(string message)
    {
        _events.Insert(0, message);
    }

    private void StartedEditingItem(Product product)
    {
        LogEvent($"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(product)}");
    }

    private void CanceledEditingItem(Product product)
    {
        LogEvent($"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(product)}");
    }

    private void CommittedItemChanges(Product product)
    {
        LogEvent($"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(product)}");
    }

    private void DeleteItem(Product product)
    {
        LogEvent($"Event = DeleteItem, Data = {System.Text.Json.JsonSerializer.Serialize(product)}");
        _products.Remove(product);
    }


---


    private void NewItem()
    {
        var addThis = new Product { Id = 0, Brand = "Test", Name = "Test", Description = "Test", Quantity = 100, Price = 100 };
        _products.Add(addThis);
        mudDataGrid.SetEditingItemAsync(addThis);
    }